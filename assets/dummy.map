{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/templates/application.js","dummy/templates/index.js","dummy/tests/app.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/sl/register-test-helpers.js","dummy/tests/helpers/sl/synchronous.js","dummy/tests/helpers/sl/synchronous/ajax.js","dummy/tests/helpers/sl/synchronous/contains.js","dummy/tests/helpers/sl/synchronous/requires.js","dummy/tests/helpers/sl/utils/utils.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/helpers/sl/synchronous/ajax-test.js","dummy/tests/unit/helpers/sl/synchronous/ajax-test.jshint.js","dummy/tests/unit/helpers/sl/synchronous/contains-test.js","dummy/tests/unit/helpers/sl/synchronous/contains-test.jshint.js","dummy/tests/unit/helpers/sl/synchronous/requires-test.js","dummy/tests/unit/helpers/sl/synchronous/requires-test.jshint.js","dummy/tests/unit/helpers/sl/utils/utils-test.js","dummy/tests/unit/helpers/sl/utils/utils-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  exports['default'] = Router.map(function () {});\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-home\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" Home\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"container\");\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-md-12\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"btn-group pull-right\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-default dropdown-toggle\");\n        dom.setAttribute(el5,\"data-toggle\",\"dropdown\");\n        dom.setAttribute(el5,\"aria-expanded\",\"false\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"i\");\n        dom.setAttribute(el6,\"class\",\"fa fa-reorder\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"caret\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"ul\");\n        dom.setAttribute(el5,\"class\",\"dropdown-menu\");\n        dom.setAttribute(el5,\"role\",\"menu\");\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/blob/master/README.md\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-wrench\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Get Started\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/blob/master/CONTRIBUTING.md\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-cog\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Contribution Guide\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/stargazers\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-star\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Star Our Repo\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/fork\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-code-fork\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Fork Our Repo\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-md-12 text-center\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createTextNode(\"ember install sl-ember-test-helpers\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createElement(\"a\");\n        dom.setAttribute(el5,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/blob/master/LICENSE.md\");\n        var el6 = dom.createTextNode(\"MIT Licensed\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1, 1, 3, 1]),0,0);\n        var morph1 = dom.createMorphAt(element0,3,3);\n        block(env, morph0, context, \"link-to\", [\"index\"], {}, child0, null);\n        content(env, morph1, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-12 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"sl-ember-test-helpers\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"lead\");\n        var el4 = dom.createTextNode(\"An Ember CLI Addon that provides and registers test helpers for use in the testing of your application.\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-6 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/blob/master/README.md\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-book fa-5x\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/blob/master/README.md\");\n        var el5 = dom.createElement(\"b\");\n        var el6 = dom.createTextNode(\"Documentation\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-6 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-github fa-5x\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers\");\n        var el5 = dom.createElement(\"b\");\n        var el6 = dom.createTextNode(\"Available on GitHub\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/sl/register-test-helpers', ['exports', 'ember', 'dummy/tests/helpers/sl/synchronous'], function (exports, Ember, synchronous) {\n\n    'use strict';\n\n    exports['default'] = function () {\n        Ember['default'].Test.registerHelper('contains', synchronous.contains);\n        Ember['default'].Test.registerHelper('ajax', synchronous.ajax);\n        Ember['default'].Test.registerHelper('requires', synchronous.requires);\n    }\n\n});","define('dummy/tests/helpers/sl/synchronous', ['exports', 'dummy/tests/helpers/sl/synchronous/contains', 'dummy/tests/helpers/sl/synchronous/ajax', 'dummy/tests/helpers/sl/synchronous/requires'], function (exports, contains, ajax, requires) {\n\n\t'use strict';\n\n\n\n\texports.contains = contains['default'];\n\texports.ajax = ajax['default'];\n\texports.requires = requires['default'];\n\n});","define('dummy/tests/helpers/sl/synchronous/ajax', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var AjaxHelper = function AjaxHelper() {};\n\n    /**\n     * Emulate the beginning of an AJAX request\n     *\n     * @param   {Ember.String} endpoint\n     * @returns {void}\n     */\n    AjaxHelper.prototype.begin = function (endpoint) {\n        Ember['default'].run(function () {\n            if (endpoint) {\n                $(document).trigger('ajaxSend', [null, { url: endpoint }]);\n            } else {\n                $(document).trigger('ajaxStart');\n            }\n        });\n    };\n\n    /**\n     * Emulate the conclusion of an AJAX request\n     *\n     * @param   {Ember.String} endpoint\n     * @returns {void}\n     */\n    AjaxHelper.prototype.end = function (endpoint) {\n        Ember['default'].run(function () {\n            if (endpoint) {\n                $(document).trigger('ajaxComplete', [null, { url: endpoint }]);\n            } else {\n                $(document).trigger('ajaxStop');\n            }\n        });\n    };\n\n    var helper = new AjaxHelper();\n\n    exports['default'] = helper;\n\n});","define('dummy/tests/helpers/sl/synchronous/contains', ['exports', 'ember', 'dummy/tests/helpers/sl/utils/utils'], function (exports, Ember, utils) {\n\n    'use strict';\n\n    exports['default'] = function () {\n        var index = 3 === arguments.length ? 1 : 0,\n            underTest = arguments[index],\n            testFor = arguments[index + 1];\n\n        Ember['default'].assert('First non-optional argument must be an array, string or object', 'object' === typeof underTest || 'string' === typeof underTest || Array.isArray(underTest));\n\n        Ember['default'].assert('Second non-optional argument must be an array, string or object', 'object' === typeof testFor || 'string' === typeof testFor || Array.isArray(testFor));\n\n        return utils.doArraysIntersect(utils.convertToArray(underTest), utils.convertToArray(testFor));\n    }\n\n});","define('dummy/tests/helpers/sl/synchronous/requires', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = function (methodUnderTest, requiredTypes) {\n        var typesToTest = {\n            number: {\n                required: false,\n                testValue: 123987465,\n                message: 'Parameter was a number'\n            },\n            string: {\n                required: false,\n                testValue: 'testString',\n                message: 'Parameter was a string'\n            },\n            array: {\n                required: false,\n                testValue: [],\n                message: 'Parameter was an array'\n            },\n            object: {\n                required: false,\n                testValue: {},\n                message: 'Parameter was an object'\n            },\n            'function': {\n                required: false,\n                testValue: function testValue() {},\n                message: 'Parameter was a function'\n            },\n            undefined: {\n                required: false,\n                testValue: undefined,\n                message: 'Parameter was undefined'\n            },\n            boolean: {\n                required: false,\n                testValue: true,\n                message: 'Parameter was a boolean'\n            }\n        },\n            testsThatHaveFailed = [],\n            assertionThrown,\n            assertionPassed,\n            property,\n            parameter;\n\n        Ember['default'].assert('First argument must be a function', 'function' === typeof methodUnderTest);\n        Ember['default'].assert('Second argument must be an array', Array.isArray(requiredTypes));\n\n        // Set required parameter types\n        requiredTypes.forEach(function (item) {\n            typesToTest[item].required = true;\n        });\n\n        // Test each parameter type\n        for (property in typesToTest) {\n            if (typesToTest.hasOwnProperty(property)) {\n\n                // Reset flag\n                assertionThrown = false;\n\n                // Assign cleaner object reference\n                parameter = typesToTest[property];\n\n                // Test parameter\n                try {\n                    methodUnderTest(parameter.testValue);\n                } catch (error) {\n                    assertionThrown = true;\n                }\n\n                assertionPassed = parameter.required ? !assertionThrown : assertionThrown;\n\n                if (!assertionPassed) {\n                    testsThatHaveFailed.push(parameter.message);\n                }\n            }\n        }\n\n        return {\n            requires: 0 === testsThatHaveFailed.length ? true : false,\n            messages: testsThatHaveFailed.join('; ')\n        };\n    }\n\n});","define('dummy/tests/helpers/sl/utils/utils', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var convertToArray = function convertToArray(underTest) {\n        var returnArray;\n\n        if (Array.isArray(underTest)) {\n            returnArray = underTest;\n        } else {\n            switch (typeof underTest) {\n                case 'string':\n                    returnArray = convertStringToArray(underTest);\n                    break;\n\n                case 'object':\n                    returnArray = convertObjectKeysToArray(underTest);\n                    break;\n            }\n        }\n\n        Ember['default'].assert('String, Object or Array must be supplied', 'undefined' !== typeof returnArray);\n\n        return returnArray;\n    };\n\n    /**\n     * Splits a string into an array of individual \"words\" as delineated by spaces\n     *\n     * Primarily exists to convert format of call to .prop( 'class' )\n     *\n     * @function convertStringToArray\n     * @param   {string} underTest\n     * @throws  {Ember.assert} If argument is not provided or is not a string\n     * @returns {array}\n     */\n    var convertStringToArray = function convertStringToArray(underTest) {\n\n        Ember['default'].assert('String must be supplied', 'string' === typeof underTest);\n\n        return underTest.split(' ');\n    };\n\n    /**\n     * Returns an array containing all of the property names of an object\n     *\n     * Property names are only extracted from the object provided.  No recursion into nested objects occurs.\n     *\n     * @function convertObjectKeysToArray\n     * @param   {object} underTest\n     * @throws  {Ember.assert} If argument is not provided or is not an object\n     * @returns {array}\n     */\n    var convertObjectKeysToArray = function convertObjectKeysToArray(underTest) {\n\n        Ember['default'].assert('Object must be supplied', 'object' === typeof underTest && !Array.isArray(underTest));\n\n        return Object.keys(underTest);\n    };\n\n    /**\n     * [doArraysIntersect description]\n     *\n     * @function doArraysIntersect\n     * @param  {array} underTest\n     * @param  {array} testFor\n     * @return {boolean}\n     */\n    var doArraysIntersect = function doArraysIntersect(underTest, testFor) {\n\n        Ember['default'].assert('Parameters must be Arrays', Array.isArray(underTest) && Array.isArray(testFor));\n\n        return testFor.some(function (v) {\n            return underTest.indexOf(v) >= 0;\n        });\n    };\n\n    exports.convertToArray = convertToArray;\n    exports.convertStringToArray = convertStringToArray;\n    exports.convertObjectKeysToArray = convertObjectKeysToArray;\n    exports.doArraysIntersect = doArraysIntersect;\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/ajax-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/ajax'], function (ember_qunit, ajax) {\n\n    'use strict';\n\n    module('Unit - helpers:sl/synchronous/ajax');\n\n    ember_qunit.test('it exists', function (assert) {\n        assert.ok(ajax['default'], 'it exists');\n    });\n\n    ember_qunit.test('begin() with no parameter triggers \"ajaxStart\" event on document', function (assert) {\n        var spy = sinon.spy($.prototype, 'trigger');\n\n        ajax['default'].begin();\n\n        assert.equal(spy.args[0][0], 'ajaxStart');\n\n        $.prototype.trigger.restore();\n    });\n\n    ember_qunit.test('begin() with parameter triggers \"ajaxSend\" event on document', function (assert) {\n        var spy = sinon.spy($.prototype, 'trigger');\n\n        ajax['default'].begin('testEndpoint');\n\n        assert.equal(spy.args[0][0], 'ajaxSend');\n        assert.equal(spy.args[0][1][1].url, 'testEndpoint');\n\n        $.prototype.trigger.restore();\n    });\n\n    ember_qunit.test('end() with no parameter triggers \"ajaxStop\" event on document', function (assert) {\n        var spy = sinon.spy($.prototype, 'trigger');\n\n        ajax['default'].end();\n\n        assert.equal(spy.args[0][0], 'ajaxStop');\n\n        $.prototype.trigger.restore();\n    });\n\n    ember_qunit.test('end() with parameter triggers \"ajaxComplete\" event on document', function (assert) {\n        var spy = sinon.spy($.prototype, 'trigger');\n\n        ajax['default'].end('testEndpoint');\n\n        assert.equal(spy.args[0][0], 'ajaxComplete');\n        assert.equal(spy.args[0][1][1].url, 'testEndpoint');\n\n        $.prototype.trigger.restore();\n    });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/ajax-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers/sl/synchronous');\n  test('unit/helpers/sl/synchronous/ajax-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/sl/synchronous/ajax-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/contains-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/contains'], function (ember_qunit, contains) {\n\n    'use strict';\n\n    var utils = require('dummy/tests/helpers/sl/utils/utils');\n\n    module('Unit - helpers:sl/synchronous/contains');\n\n    ember_qunit.test('it exists', function (assert) {\n        assert.ok(contains['default'], 'it exists');\n    });\n\n    ember_qunit.test('First non-optional argument must be an array, string or object', function (assert) {\n\n        // Number\n        var assertionThrown = false;\n\n        try {\n            contains['default'](12);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was a number');\n\n        // String\n        assertionThrown = false;\n\n        try {\n            contains['default']('testString', {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'First parameter was a string');\n\n        // Array\n        assertionThrown = false;\n\n        try {\n            contains['default']([], {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'First parameter was an array');\n\n        // Object\n        assertionThrown = false;\n\n        try {\n            contains['default']({}, {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'First parameter was an object');\n\n        // Function\n        assertionThrown = false;\n\n        try {\n            contains['default'](function () {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was a function');\n\n        // Undefined\n        assertionThrown = false;\n\n        try {\n            contains['default'](undefined);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was undefined');\n\n        // Boolean\n        assertionThrown = false;\n\n        try {\n            contains['default'](true);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was a boolean');\n    });\n\n    ember_qunit.test('Second non-optional argument must be an array, string or object', function (assert) {\n\n        // Number\n        var assertionThrown = false;\n\n        try {\n            contains['default']({}, 12);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was a number');\n\n        // String\n        assertionThrown = false;\n\n        try {\n            contains['default']({}, 'testString');\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'Second parameter was a string');\n\n        // Array\n        assertionThrown = false;\n\n        try {\n            contains['default']({}, []);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'Second parameter was an array');\n\n        // Object\n        assertionThrown = false;\n\n        try {\n            contains['default']({}, {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'Second parameter was an object');\n\n        // Function\n        assertionThrown = false;\n\n        try {\n            contains['default']({}, function () {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was a function');\n\n        // Undefined\n        assertionThrown = false;\n\n        try {\n            contains['default']({}, undefined);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was undefined');\n\n        // Boolean\n        assertionThrown = false;\n\n        try {\n            contains['default']({}, true);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was a boolean');\n    });\n\n    ember_qunit.test('Returns value from call to doArraysIntersect()', function (assert) {\n        var spy = sinon.spy(utils, 'doArraysIntersect');\n\n        contains['default']([], []);\n\n        assert.ok(spy.calledOnce, 'doArraysIntersect() was called');\n\n        utils.doArraysIntersect.restore();\n    });\n\n    ember_qunit.test('Arguments are passed to doArraysIntersect() in the correct order', function (assert) {\n        var spy = sinon.spy(utils, 'doArraysIntersect');\n\n        contains['default']('b', ['d', 'e']);\n\n        assert.equal(spy.args[0][0], 'b', 'First argument');\n        assert.deepEqual(spy.args[0][1], ['d', 'e'], 'Second argument');\n\n        utils.doArraysIntersect.restore();\n    });\n\n    ember_qunit.test('Returns a boolean', function (assert) {\n        var response;\n\n        response = contains['default']('b', ['d', 'e']);\n\n        assert.propEqual(response, false, 'Is boolean false');\n\n        response = contains['default'](['d', 'e'], 'e');\n\n        assert.propEqual(response, true, 'Is boolean true');\n    });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/contains-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers/sl/synchronous');\n  test('unit/helpers/sl/synchronous/contains-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/sl/synchronous/contains-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/requires-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/requires'], function (Ember, ember_qunit, requires) {\n\n    'use strict';\n\n    module('Unit - helpers:sl/synchronous/requires');\n\n    ember_qunit.test('it exists', function (assert) {\n        assert.ok(requires['default'], 'it exists');\n    });\n\n    ember_qunit.test('First argument must be a function', function (assert) {\n\n        // Number\n        var assertionThrown = false;\n\n        try {\n            requires['default'](12, false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was a number');\n\n        // String\n        assertionThrown = false;\n\n        try {\n            requires['default']('testString', false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was a string');\n\n        // Array\n        assertionThrown = false;\n\n        try {\n            requires['default']([], false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was an array');\n\n        // Object\n        assertionThrown = false;\n\n        try {\n            requires['default']({}, false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was an object');\n\n        // Function\n        assertionThrown = false;\n\n        try {\n            requires['default'](function () {}, false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was a function');\n\n        // Undefined\n        assertionThrown = false;\n\n        try {\n            requires['default'](undefined, false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was undefined');\n\n        // Boolean\n        assertionThrown = false;\n\n        try {\n            requires['default'](true, false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was a boolean');\n    });\n\n    ember_qunit.test('Second argument must be an array', function (assert) {\n\n        // Number\n        var assertionThrown = false;\n\n        try {\n            requires['default'](12, 12);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was a number');\n\n        // String\n        assertionThrown = false;\n\n        try {\n            requires['default']('testString', 'testString');\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was a string');\n\n        // Array\n        assertionThrown = false;\n\n        try {\n            requires['default']([], []);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was an array');\n\n        // Object\n        assertionThrown = false;\n\n        try {\n            requires['default']({}, {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was an object');\n\n        // Function\n        assertionThrown = false;\n\n        try {\n            requires['default'](function () {}, function () {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was a function');\n\n        // Undefined\n        assertionThrown = false;\n\n        try {\n            requires['default'](undefined, undefined);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was undefined');\n\n        // Boolean\n        assertionThrown = false;\n\n        try {\n            requires['default'](true, false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was a boolean');\n    });\n\n    ember_qunit.test('Return type', function (assert) {\n        var testFunction = function testFunction(first) {\n            Ember['default'].assert('Test argument must be a function or boolean', 'function' === typeof first || 'boolean' === typeof first);\n        },\n            test = requires['default'](testFunction, ['function', 'boolean']);\n\n        assert.deepEqual(test, { requires: true, messages: '' }, 'Returns expected object');\n    });\n\n    ember_qunit.test('Functions as expected', function (assert) {\n        var testFunction = function testFunction(first) {\n            Ember['default'].assert('Test argument must be a function or boolean', 'function' === typeof first || 'boolean' === typeof first);\n        },\n            test;\n\n        test = requires['default'](testFunction, ['function', 'boolean']);\n        assert.ok(test.requires, 'Functioned as expected when passed desired argument types: ' + test.messages);\n\n        test = requires['default'](testFunction, ['function', 'boolean', 'string']);\n        assert.ok(!test.requires, 'Functioned as expected when passed undesired argument types: ' + test.messages);\n    });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/requires-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers/sl/synchronous');\n  test('unit/helpers/sl/synchronous/requires-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/sl/synchronous/requires-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/utils/utils-test', ['ember-qunit', 'dummy/tests/helpers/sl/utils/utils', 'dummy/tests/helpers/sl/synchronous/requires'], function (ember_qunit, utils, requires) {\n\n    'use strict';\n\n    module('Unit - utils:sl/utils/utils');\n\n    ember_qunit.test('convertToArray() exists', function (assert) {\n        assert.ok(utils.convertToArray, 'it exists');\n    });\n\n    ember_qunit.test('convertStringToArray() exists', function (assert) {\n        assert.ok(utils.convertStringToArray, 'it exists');\n    });\n\n    ember_qunit.test('convertObjectKeysToArray() exists', function (assert) {\n        assert.ok(utils.convertObjectKeysToArray, 'it exists');\n    });\n\n    ember_qunit.test('doArraysIntersect() exists', function (assert) {\n        assert.ok(utils.doArraysIntersect, 'it exists');\n    });\n\n    ember_qunit.test('convertToArray() requires either an Array, String, or Object to be provided', function (assert) {\n        var test = requires['default'](utils.convertToArray, ['array', 'string', 'object']);\n\n        assert.ok(test.requires, test.messages);\n    });\n\n    ember_qunit.test('convertToArray() returns expected result', function (assert) {\n        var testResults1 = utils.convertToArray(['a', 'b']),\n            testResults2 = utils.convertToArray('testing things'),\n            testResults3 = utils.convertToArray({ a: 1, b: 2 });\n\n        assert.ok(Array.isArray(testResults1));\n        assert.deepEqual(['a', 'b'], testResults1);\n\n        assert.ok(Array.isArray(testResults2));\n        assert.deepEqual(['testing', 'things'], testResults2);\n\n        assert.ok(Array.isArray(testResults3));\n        assert.deepEqual(['a', 'b'], testResults3);\n    });\n\n    ember_qunit.test('convertStringToArray() requires a string to be provided', function (assert) {\n        var test = requires['default'](utils.convertStringToArray, ['string']);\n\n        assert.ok(test.requires, test.messages);\n    });\n\n    ember_qunit.test('convertStringToArray() returns an array with a single element when passed a string without spaces', function (assert) {\n        assert.deepEqual(utils.convertStringToArray('testString'), ['testString']);\n    });\n\n    ember_qunit.test('convertStringToArray() returns an array with as many elements as there are \"words\" represented in a string passed to it containing spaces', function (assert) {\n        assert.deepEqual(utils.convertStringToArray('the test string'), ['the', 'test', 'string']);\n    });\n\n    ember_qunit.test('convertObjectKeysToArray() requires an object to be provided', function (assert) {\n        var test = requires['default'](utils.convertObjectKeysToArray, ['object']);\n\n        assert.ok(test.requires, test.messages);\n    });\n\n    ember_qunit.test('convertObjectKeysToArray() returns an array of object properties', function (assert) {\n        assert.deepEqual(utils.convertObjectKeysToArray({ testing: true, bird: 'duck' }), ['testing', 'bird']);\n        assert.deepEqual(utils.convertObjectKeysToArray({ testing2: true, bird2: { feathers: true, tasty: false } }), ['testing2', 'bird2']);\n    });\n\n    ember_qunit.test('doArraysIntersect() requires both parameters to be Arrays', function (assert) {\n        // First parameter not an Array, second one is\n\n        var assertionThrown = false;\n\n        try {\n            utils.doArraysIntersect('', []);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'First parameter was not an Array');\n\n        // First parameter is an Array, second one is not\n\n        assertionThrown = false;\n\n        try {\n            utils.doArraysIntersect([], '');\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Second parameter was not an Array');\n\n        // Both parameters are Arrays\n\n        assertionThrown = false;\n\n        try {\n            utils.doArraysIntersect([], []);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'Both parameters were Arrays');\n    });\n\n    ember_qunit.test('doArraysIntersect() functions as expected', function (assert) {\n        assert.ok(utils.doArraysIntersect(['a', 'b', 'c'], ['a']), 'Single intersection into multiple');\n        assert.ok(utils.doArraysIntersect(['a', 'b', 'c'], ['a', 'c']), 'Multiple intersections into multiple');\n        assert.ok(utils.doArraysIntersect(['a', 'b', 'c'], ['a', 'c', 'd']), 'Multiple intersections into multiple with single non-intersection value');\n        assert.ok(!utils.doArraysIntersect(['a', 'b', 'c'], ['d']), 'Single non-intersection value into multiple');\n        assert.ok(!utils.doArraysIntersect(['d'], ['a']), 'Single non-intersection value into single, with non-intersection value');\n        assert.ok(utils.doArraysIntersect(['d'], ['a', 'd', 'e']), 'Multiple intersections into single, with single intersection value');\n    });\n\n});","define('dummy/tests/unit/helpers/sl/utils/utils-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers/sl/utils');\n  test('unit/helpers/sl/utils/utils-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/sl/utils/utils-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"sl-ember-test-helpers\",\"version\":\"1.4.0.92d5d7c4\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}